import tensorflow as tf
import numpy as np
from tensorflow import keras
# GRADED FUNCTION: house_model
def house_model(y_new):
    xs = np.array([0.0,1.0,2.0,3.0,4.0,5.0,6.0],dtype=float)
    ys = np.array([0.5,1.0,1.5,2.0,2.5,3.0,3.5],dtype=float)
    model = tf.keras.Sequential([keras.layers.Dense(units=1,input_shape=[1])])
    model.compile(optimizer = 'sgd',loss = 'mean_squared_error')
    model.fit(xs,ys,epochs=500)
    return model.predict(y_new)[0]

prediction = house_model([7.0])
print(prediction)

=========================================

import tensorflow as tf
class Callbacks(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('acc')>0.99):
      print("\nReached 99% accuracy so cancelling training!")
      self.model.stop_training = True
callbacks = Callbacks()
# YOUR CODE SHOULD END HERE
mnist = tf.keras.datasets.mnist
(x_train, y_train),(x_test, y_test) = mnist.load_data()
# YOUR CODE SHOULD START HERE
#scaling for finding minima in less no of steps
x_train = x_train/255.0
x_test = x_test/255.0
# YOUR CODE SHOULD END HERE   
# YOUR CODE SHOULD START HERE
model = tf.keras.models.Sequential([
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(1024,activation=tf.nn.relu),
    tf.keras.layers.Dense(10,activation=tf.nn.softmax)
    ])
# YOUR CODE SHOULD END HERE


model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# YOUR CODE SHOULD START HERE
model.fit(x_train,y_train,epochs=10,callbacks=[callbacks])
# YOUR CODE SHOULD END HERE

================================================

# GRADED FUNCTION: train_mnist
def train_mnist():
    
    # Please write your code only where you are indicated.
    # please do not remove # model fitting inline comments.

    
    # YOUR CODE SHOULD START HERE
    class Callbacks(tf.keras.callbacks.Callback):
        def on_epoch_end(self, epoch, logs={}):
            if(logs.get('acc')>0.99):
                print("\Reached 99% accuracy so cancelling training!")
                self.model.stop_training=True
            
            
    callbacks = Callbacks()           
    # YOUR CODE SHOULD END HERE

    mnist = tf.keras.datasets.mnist

    (x_train, y_train),(x_test, y_test) = mnist.load_data(path=path)
    # YOUR CODE SHOULD START HERE
    x_train=x_train/255.0
    x_test=x_test/255.0
    # YOUR CODE SHOUD END HERE
    model = tf.keras.models.Sequential([
        # YOUR CODE SHOULD START HERE
        tf.keras.layers.Flatten(),
        tf.keras.layers.Dense(1024,activation=tf.nn.relu),
        tf.keras.layers.Dense(10,activation=tf.nn.softmax)
        # YOUR CODE SHOULD END HERE
    ])

    model.compile(optimizer='adam',
                  loss='sparse_categorical_crossentropy',
                  metrics=['accuracy'])
    
    # model fitting
    history = model.fit(x_train,y_train,epochs=10,callbacks=[callbacks])
# YOUR CODE SHOULD START HERE
              # YOUR CODE SHOULD END HERE
    
    # model fitting
    return history.epoch, history.history['acc'][-1]

=====================================================



import tensorflow as tf
print(tf.__version__)

# YOUR CODE STARTS HERE
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('acc') > .998):
      print("\nReached 99.8% accuracy so cancelling training!")
      self.model.stop_training = True
callbacks = myCallback() 
# YOUR CODE ENDS HERE

mnist = tf.keras.datasets.mnist
(training_images, training_labels), (test_images, test_labels) = mnist.load_data()

## check training and test image size
print("training image shape:{0} test image shape:{1}".format(training_images.shape,test_images.shape))

# YOUR CODE STARTS HERE
training_images = training_images.reshape(training_images.shape[0],training_images.shape[1],training_images.shape[2],1)
training_images = training_images/255.0
test_images = test_images.reshape(test_images.shape[0],test_images.shape[1],test_images.shape[2],1)
test_images = test_images/255.0
# YOUR CODE ENDS HERE

model = tf.keras.models.Sequential()
# YOUR CODE STARTS HERE
model.add(tf.keras.layers.Conv2D(64,(3,3),activation='relu',input_shape=(28,28,1)))
model.add(tf.keras.layers.MaxPooling2D(2,2))
model.add(tf.keras.layers.Flatten())
model.add(tf.keras.layers.Dense(524,activation='relu'))
model.add(tf.keras.layers.Dense(10,activation='softmax'))
          
# YOUR CODE ENDS HERE

# YOUR CODE STARTS HERE
model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])
model.summary()
model.fit(training_images,training_labels,epochs=20,callbacks=[callbacks])
# YOUR CODE ENDS HERE

test_loss = model.evaluate(test_images, test_labels)


=================================================================================